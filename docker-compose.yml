version: '3.8'

services:
  server:
    build:
      context: ./packages/server
      dockerfile: Dockerfile
    ports:
      - "4000:4000"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:4000"]  # Adjust health check URL and command
      interval: 30s   # Check health every 30 seconds
      timeout: 5s    # Timeout for each health check attempt
      retries: 5      # Number of retries before considering the container unhealthy
    environment:
      - JWT_SECRET=${JWT_SECRET}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - RETURN_URL=${RETURN_URL}
      - DATABASE_HOST=${DATABASE_HOST}
      - DATABASE_PORT=${DATABASE_PORT}
      - DATABASE_USER=${DATABASE_USER}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - DATABASE_NAME=${DATABASE_NAME}
      - API_BASE_URL=${API_BASE_URL}
    depends_on:
      mysql:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app-network
  mysql:
    image: mysql:latest
    ports:
      - "3307:3306"
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h localhost -u root -proot"]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      MYSQL_DATABASE: ${DATABASE_NAME}
      MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
    volumes:
      - mysql-data:/var/lib/mysql
    networks:
      - app-network
    command: ["--bind-address=0.0.0.0"]
  web: 
    build: 
      context: ./packages/web
      dockerfile: Dockerfile
    environment:
      - VITE_BACKEND_URL=${VITE_BACKEND_URL}
      - VITE_API_BASE_URL=${VITE_API_BASE_URL}
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:3000"] 
    depends_on:
      server:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped
    ports:
      - "3000:3000"

  phpmyadmin:
    image: phpmyadmin/phpmyadmin:latest
    environment:
      PMA_HOST: ${DATABASE_HOST}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    ports:
      - "8080:80"
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped

networks:
  app-network:
volumes:
  mysql-data: